{"version":3,"sources":["components/ColorConverter.js","hexToRgb.js","App.js","serviceWorker.js","index.js"],"names":["correctValue","ColorConverter","useState","hex","rgb","backgroundColor","colors","setColors","changeColors","target","value","length","prevColors","match","rgbColor","stringHex","result","exec","r","parseInt","g","b","hexToRgb","className","style","type","name","onChange","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uPAGA,IAAMA,EAAe,iBAEN,SAASC,IAAkB,IAAD,EACXC,mBAAS,CACnCC,IAAK,IACLC,IAAK,GACLC,gBAAiB,YAJoB,mBAChCC,EADgC,KACxBC,EADwB,KAOjCC,EAAe,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACtB,GAAIA,EAAOC,MAAMC,OAAS,EACxBJ,GAAU,SAACK,GAAD,sBAAsBA,EAAtB,CAAkCT,IAAKM,EAAOC,gBAI1D,GAAID,EAAOC,MAAMG,MAAMb,GAAe,CACpC,IAAMc,ECnBG,SAAkBC,GAC/B,IAAMC,EAAS,4CAA4CC,KAAKF,GAChE,MAAO,CACLG,EAAGC,SAASH,EAAO,GAAI,IACvBI,EAAGD,SAASH,EAAO,GAAI,IACvBK,EAAGF,SAASH,EAAO,GAAI,KDcJM,CAASb,EAAOC,OACjCH,EAAU,CACRJ,IAAKM,EAAOC,MACZN,IAAI,OAAD,OAASU,EAASI,EAAlB,aAAwBJ,EAASM,EAAjC,aAAuCN,EAASO,EAAhD,KACHhB,gBAAiBI,EAAOC,aAG1BH,GAAU,SAACK,GAAD,sBAAsBA,EAAtB,CAAkCR,IAAK,8CAIrD,OACE,yBAAKmB,UAAU,gBAAgBC,MAAO,CAAEnB,gBAAiBC,EAAOD,kBAC9D,2BAAOoB,KAAK,OAAOC,KAAK,WAAWhB,MAAOJ,EAAOH,IAAKwB,SAAUnB,IAChE,2BAAOiB,KAAK,OAAOC,KAAK,WAAWhB,MAAOJ,EAAOF,IAAKuB,SAAUnB,KErBvDoB,MARf,WACE,OACE,yBAAKL,UAAU,aACX,kBAACtB,EAAD,QCKY4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASnB,MACvB,2DCZNoB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1ab9a411.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport hexToRgb from '../hexToRgb';\n\nconst correctValue = /#[a-f0-9]{6}/gi;\n\nexport default function ColorConverter() {\n  const [colors, setColors] = useState({\n    hex: '#',\n    rgb: '',\n    backgroundColor: '#000000',\n  });\n   \n  const changeColors = ({ target }) => {\n    if (target.value.length < 7) {\n      setColors((prevColors) => ({ ...prevColors, hex: target.value }));\n      return;\n    }\n\n    if (target.value.match(correctValue)) {\n      const rgbColor = hexToRgb(target.value);\n      setColors({\n        hex: target.value,\n        rgb: `rgb(${rgbColor.r}, ${rgbColor.g}, ${rgbColor.b})`,\n        backgroundColor: target.value,\n      });\n    } else {\n      setColors((prevColors) => ({ ...prevColors, rgb: 'Ошибка!' }));\n    }\n  };\n\n  return (\n    <div className=\"color-element\" style={{ backgroundColor: colors.backgroundColor }}>\n      <input type=\"text\" name=\"hexColor\" value={colors.hex} onChange={changeColors} />\n      <input type=\"text\" name=\"rgbColor\" value={colors.rgb} onChange={changeColors} />\n    </div>\n  );\n}\n","export default function hexToRgb(stringHex) {\n  const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(stringHex);\n  return {\n    r: parseInt(result[1], 16),\n    g: parseInt(result[2], 16),\n    b: parseInt(result[3], 16),\n  };\n}\n","import React from 'react';\nimport './App.css';\nimport ColorConverter from './components/ColorConverter';\n\nfunction App() {\n  return (\n    <div className=\"container\">\n        <ColorConverter />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}